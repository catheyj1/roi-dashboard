// src/RoiDashboardV2.jsx - Simplified Interactive ROI Dashboard
import React, { useState } from "react";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  ResponsiveContainer,
  LineChart,
  Line,
  Legend,
  Area,
  AreaChart
} from "recharts";
import { exportToPDF } from "./utils/pdfExport";


// Meta KPI header with period toggle
const HeaderMetaKPI = ({ roiPercent = 55, delta = 5, kpiPeriod, setKpiPeriod }) => (
  <div className="flex items-center justify-between mb-6">
    <div className="text-sm text-gray-600">
      <span className="mr-2">ROI Captured to Date:</span>
      <span className="font-semibold text-gray-900">{roiPercent}%</span>
      <span className="ml-2 inline-flex items-center text-green-600 font-medium">
        +{delta}% ({kpiPeriod})
      </span>
    </div>
    <div className="flex bg-gray-100 rounded-lg p-1 text-xs" role="group" aria-label="KPI time period selection">
      {["30d", "90d", "ytd"].map(p => (
        <button
          key={p}
          onClick={() => setKpiPeriod(p)}
          className={`px-3 py-1 rounded-md transition-all duration-200 ${
            kpiPeriod === p 
              ? "bg-white text-gray-900 shadow-sm" 
              : "text-gray-600 hover:text-gray-900"
          }`}
          aria-pressed={kpiPeriod === p}
        >
          {p.toUpperCase()}
        </button>
      ))}
    </div>
  </div>
);

// Simplified KPI Card with unified iconography
const KpiCard = ({ icon, title, value, sublabel, deltaText, deltaTone = "positive" }) => {
  const tone = deltaTone === "positive" ? "text-green-600" : deltaTone === "negative" ? "text-red-600" : "text-gray-600";
  
  return (
    <div className="bg-white border border-gray-200 rounded-xl p-6 shadow-sm">
      <div className="flex items-start justify-between mb-2">
        <div className="flex items-center">
          <div className="w-8 h-8 rounded-lg bg-gray-50 flex items-center justify-center mr-3">
            {icon}
          </div>
          <div className="text-sm font-medium text-gray-700">{title}</div>
        </div>
        <span className={`text-xs px-2 py-0.5 rounded-full bg-gray-100 ${tone}`}>{deltaText}</span>
      </div>
      <div className="text-3xl font-semibold text-gray-900 mb-1">{value}</div>
      {sublabel && <div className="text-sm text-gray-500 truncate">{sublabel}</div>}
    </div>
  );
};


// Trust Mix Composition (100% stacked area)
const TrustMixComposition = () => {
  const data = [
    { month: "Jan", low: 40, med: 45, high: 15 },
    { month: "Feb", low: 38, med: 46, high: 16 },
    { month: "Mar", low: 36, med: 47, high: 17 },
    { month: "Apr", low: 35, med: 46, high: 19 },
    { month: "May", low: 34, med: 45, high: 21 },
    { month: "Jun", low: 33, med: 44, high: 23 },
  ];

  return (
    <div className="bg-white shadow rounded-xl p-6 mb-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-2">Trust Mix Composition</h3>
      <p className="text-xs text-gray-600 mb-4">% of customers classified Low / Medium / High Trust</p>
      <div className="h-64">
        <ResponsiveContainer width="100%" height="100%">
          <AreaChart data={data} stackOffset="expand" margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
            <XAxis dataKey="month" axisLine={false} tickLine={false} tick={{ fontSize: 11, fill: "#6B7280" }} />
            <YAxis tickFormatter={(v)=>`${(v*100).toFixed(0)}%`} axisLine={false} tickLine={false} tick={{ fontSize: 11, fill: "#6B7280" }} />
            <Tooltip formatter={(val,name)=>[`${(val*100).toFixed(0)}%`, name]} />
            <Legend wrapperStyle={{ paddingTop: 12, fontSize: 12, color: "#6B7280" }} />
            <Area type="monotone" dataKey="low" stackId="1" stroke="#EF4444" fill="#FCA5A5" name="Low Trust" />
            <Area type="monotone" dataKey="med" stackId="1" stroke="#3B82F6" fill="#93C5FD" name="Medium Trust" />
            <Area type="monotone" dataKey="high" stackId="1" stroke="#10B981" fill="#86EFAC" name="High Trust" />
          </AreaChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Impact Metrics (line chart for LTV + RPR)
const TrustImpactMetrics = () => {
  const data = [
    { month: "Jan", highLTV: 1247, repeatPR: 62 },
    { month: "Feb", highLTV: 1260, repeatPR: 64 },
    { month: "Mar", highLTV: 1280, repeatPR: 66 },
    { month: "Apr", highLTV: 1300, repeatPR: 68 },
    { month: "May", highLTV: 1320, repeatPR: 70 },
    { month: "Jun", highLTV: 1350, repeatPR: 72 },
  ];

  return (
    <div className="bg-white shadow rounded-xl p-6 mb-8">
      <h3 className="text-lg font-semibold text-gray-900 mb-2">Impact Metrics</h3>
      <p className="text-xs text-gray-600 mb-4">High Trust LTV and Repeat Purchase Rate trends</p>
      <div className="h-64">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
            <XAxis dataKey="month" axisLine={false} tickLine={false} tick={{ fontSize: 11, fill: "#6B7280" }} />
            <YAxis axisLine={false} tickLine={false} tick={{ fontSize: 11, fill: "#6B7280" }} />
            <Tooltip 
              contentStyle={{ backgroundColor: "white", border: "1px solid #e5e7eb", borderRadius: 8, boxShadow: "0 4px 6px -1px rgba(0,0,0,0.1)"}}
            />
            <Legend wrapperStyle={{ paddingTop: 12, fontSize: 12, color: "#6B7280" }} />
            <Line type="monotone" dataKey="highLTV" stroke="#10B981" strokeWidth={2.5} name="High Trust LTV" />
            <Line type="monotone" dataKey="repeatPR" stroke="#7C3AED" strokeWidth={2.5} name="Repeat Purchase Rate (%)" />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
};

// Dummy Data Arrays
const segmentationData = [
  { trust: "Low Trust", customers: 25, retailerLTV: 127, networkLTV: 156, returns: 847 },
  { trust: "Medium Trust", customers: 60, retailerLTV: 425, networkLTV: 523, returns: 1432 },
  { trust: "High Trust", customers: 15, retailerLTV: 1247, networkLTV: 1589, returns: 234 },
];

const ktiData = [
  { trust: "Low", LTV: 127 },
  { trust: "Medium", LTV: 425 },
  { trust: "High", LTV: 1247 },
];

const ktiSuppression = [
  { type: "Rules Only", value: 247 },
  { type: "Both", value: 89 },
  { type: "IRIS Only", value: 156 },
];

const boxlessData = [
  { trust: "Low", LTV: 127 },
  { trust: "Medium", LTV: 425 },
  { trust: "High", LTV: 1247 },
];

const boxlessSuppression = [
  { type: "Rules Only", value: 134 },
  { type: "Both", value: 67 },
  { type: "IRIS Only", value: 98 },
];

const appeasementBeforeAfter = [
  { metric: "Repeat Purchase Rate", before: 67.2, after: 79.8 },
  { metric: "LTV", before: 1247, after: 1456 },
  { metric: "Time to Next Purchase (days)", before: 18.3, after: 14.7 },
];

const delayedFraud = [
  { metric: "Confirmed Fraud Cases", value: 43 },
  { metric: "Refund $ Saved", value: 18925 },
];

const delayedRates = { denialRate: 23.7, falsePositive: 4.2 };

const ftidData = [
  { type: "Attempts", value: 120 },
  { type: "Blocked", value: 95 },
];

// Shared DrillInModal
const DrillInModal = ({ title, children, onClose }) => (
  <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
    <div className="bg-white rounded-xl max-w-4xl w-full p-6 overflow-y-auto max-h-[90vh] relative">
      <button 
        onClick={onClose} 
        className="absolute top-4 right-4 text-gray-500 hover:text-gray-800 text-lg"
      >
        âœ•
      </button>
      <h2 className="text-xl font-bold mb-4">{title}</h2>
      {children}
    </div>
  </div>
);

// Drill-in Components
const SegmentationDrillIn = () => (
  <div className="h-80">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={segmentationData}>
        <CartesianGrid strokeDasharray="3 3" />
        <XAxis dataKey="trust" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Bar dataKey="customers" fill="#3B82F6" name="% of Customers" />
        <Bar dataKey="retailerLTV" fill="#10B981" name="Retailer LTV" />
        <Bar dataKey="networkLTV" fill="#6366F1" name="Network LTV" />
        <Bar dataKey="returns" fill="#F59E0B" name="Returns Volume" />
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const KtiDrillIn = () => (
  <div>
    <h3 className="font-semibold mb-2">LTV by Trust</h3>
    <div className="h-48">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={ktiData}>
          <XAxis dataKey="trust" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="LTV" fill="#3B82F6" />
        </BarChart>
      </ResponsiveContainer>
    </div>
    <h3 className="font-semibold mt-6 mb-2">Suppression Overlap</h3>
    <div className="h-48">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={ktiSuppression}>
          <XAxis dataKey="type" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="value" fill="#60A5FA" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  </div>
);

const BoxlessDrillIn = () => (
  <div>
    <h3 className="font-semibold mb-2">LTV by Trust</h3>
    <div className="h-48">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={boxlessData}>
          <XAxis dataKey="trust" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="LTV" fill="#7C3AED" />
        </BarChart>
      </ResponsiveContainer>
    </div>
    <h3 className="font-semibold mt-6 mb-2">Rules vs IRIS Enforcement</h3>
    <div className="h-48">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={boxlessSuppression}>
          <XAxis dataKey="type" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="value" fill="#A78BFA" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  </div>
);

const AppeasementDrillIn = () => (
  <div className="h-64">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={appeasementBeforeAfter}>
        <XAxis dataKey="metric" />
        <YAxis />
        <Tooltip />
        <Legend />
        <Bar dataKey="before" fill="#9CA3AF" name="Before" />
        <Bar dataKey="after" fill="#10B981" name="After" />
      </BarChart>
    </ResponsiveContainer>
  </div>
);

const DelayedRefundDrillIn = () => (
  <div>
    <h3 className="font-semibold mb-2">Fraud Cases & Savings</h3>
    <div className="h-48">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={delayedFraud}>
          <XAxis dataKey="metric" />
          <YAxis />
          <Tooltip />
          <Bar dataKey="value" fill="#DC2626" />
        </BarChart>
      </ResponsiveContainer>
    </div>
    <h3 className="font-semibold mt-6">Rates</h3>
    <p>Denial Rate: {delayedRates.denialRate}%</p>
    <p>False Positive Rate: {delayedRates.falsePositive}%</p>
  </div>
);

const FtidDrillIn = () => (
  <div className="h-48">
    <ResponsiveContainer width="100%" height="100%">
      <BarChart data={ftidData}>
        <XAxis dataKey="type" />
        <YAxis />
        <Tooltip />
        <Bar dataKey="value" fill="#F97316" />
      </BarChart>
    </ResponsiveContainer>
  </div>
);

// Outcome Metric Grid
const OutcomeMetricGrid = () => {
  const metrics = [
    { label: "Early Refund (Growth)", value: "+$100K LTV", color: "text-green-600", trend: [62,65,70] },
    { label: "Refund upon Inspection", value: "$200K Prevented", color: "text-red-600", trend: [180,200,220] },
    { label: "FTID Detection", value: "$40K Avoided", color: "text-red-600", trend: [30,40,45] },
    { label: "Force Boxless", value: "$60K Prevented", color: "text-red-600", trend: [50,55,60] },
    { label: "KTI Savings", value: "$50K Saved", color: "text-blue-600", trend: [45,50,55] },
    { label: "KTI Deterrence", value: "12% Fraud Reduction", color: "text-blue-600", trend: [10,11,12] },
  ];

  const getStrokeColor = (colorClass) => {
    const colorMap = {
      "text-green-600": "#10B981",
      "text-red-600": "#EF4444", 
      "text-blue-600": "#3B82F6"
    };
    return colorMap[colorClass] || "#6B7280";
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
      {metrics.map((m,i)=>(
        <div key={i} className="bg-white border border-gray-200 rounded-xl p-5 shadow-sm">
          <div className="text-sm font-medium text-gray-700 mb-2">{m.label}</div>
          <div className={`text-xl font-bold ${m.color} mb-2`}>{m.value}</div>
          <div style={{ height: 50 }}>
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={m.trend.map((y,idx)=>({x:idx,y}))}>
                <Line type="monotone" dataKey="y" stroke={getStrokeColor(m.color)} strokeWidth={2} dot={false}/>
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      ))}
    </div>
  );
};





// Revenue Protection Breakdown - Interactive (removed unused)
  const [selectedTypes, setSelectedTypes] = useState(['all']);
  const [viewMode, setViewMode] = useState('dollar'); // 'dollar' or 'volume'
  const [customerType, setCustomerType] = useState('all'); // 'all', 'new', 'repeat'
  
  // Mock data for last 30 days with daily intervals
  const dailyData = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (29 - i));
    const dayOfWeek = date.getDay();
    
    // Simulate weekly patterns (lower on weekends)
    const weekendMultiplier = dayOfWeek === 0 || dayOfWeek === 6 ? 0.6 : 1;
    
    return {
      date: date.toISOString().split('T')[0],
      day: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      deniedReturns: Math.round((200 + Math.random() * 100) * weekendMultiplier),
      deflectedReturns: Math.round((100 + Math.random() * 50) * weekendMultiplier),
      earlyAppeasement: Math.round((80 + Math.random() * 40) * weekendMultiplier),
      delayedRefunds: Math.round((60 + Math.random() * 30) * weekendMultiplier),
      kti: Math.round((40 + Math.random() * 20) * weekendMultiplier),
      exchanges: Math.round((30 + Math.random() * 15) * weekendMultiplier),
      giftCards: Math.round((20 + Math.random() * 10) * weekendMultiplier)
    };
  });

  const returnTypes = [
    { key: 'all', label: 'All Types', color: '#6B7280' },
    { key: 'deniedReturns', label: 'Denied Returns', color: '#FCA5A5' },
    { key: 'deflectedReturns', label: 'Deflected Returns', color: '#7DD3FC' },
    { key: 'earlyAppeasement', label: 'Early Appeasement', color: '#86EFAC' },
    { key: 'delayedRefunds', label: 'Delayed Refunds', color: '#FDE68A' },
    { key: 'kti', label: 'Keep the Item (KTI)', color: '#C4B5FD' },
    { key: 'exchanges', label: 'Exchanges', color: '#F9A8D4' },
    { key: 'giftCards', label: 'Gift Cards', color: '#A5B4FC' }
  ];

  const handleTypeToggle = (typeKey) => {
    if (typeKey === 'all') {
      setSelectedTypes(['all']);
    } else {
      setSelectedTypes(prev => {
        const filtered = prev.filter(t => t !== 'all');
        if (filtered.includes(typeKey)) {
          return filtered.filter(t => t !== typeKey);
        } else {
          return [...filtered, typeKey];
        }
      });
    }
  };

  const filteredData = dailyData.map(day => {
    const filtered = { ...day };
    if (!selectedTypes.includes('all')) {
      returnTypes.forEach(type => {
        if (!selectedTypes.includes(type.key)) {
          filtered[type.key] = 0;
        }
      });
    }
    return filtered;
  });

  const totalVolume = dailyData.reduce((sum, day) => 
    sum + day.deniedReturns + day.deflectedReturns + day.earlyAppeasement + 
    day.delayedRefunds + day.kti + day.exchanges + day.giftCards, 0
  );

  return (
    <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-900">Revenue Protection Breakdown - Interactive</h3>
          <p className="text-sm text-gray-600 mt-1">Return volume by day with filtering capabilities â€¢ Last 30 days</p>
        </div>
        <div className="text-sm text-gray-500">
          Total Volume: <span className="font-semibold text-gray-900">{totalVolume.toLocaleString()}</span>
        </div>
      </div>

      {/* Filter Controls */}
      <div className="mb-6 space-y-4">
        {/* View Mode Toggle */}
        <div className="flex items-center space-x-4">
          <h4 className="text-sm font-semibold text-gray-700">View:</h4>
          <div className="flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setViewMode('dollar')}
              className={`px-3 py-1 rounded-md text-xs font-medium transition-all duration-200 ${
                viewMode === 'dollar' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              $ Value
            </button>
            <button
              onClick={() => setViewMode('volume')}
              className={`px-3 py-1 rounded-md text-xs font-medium transition-all duration-200 ${
                viewMode === 'volume' 
                  ? 'bg-white text-gray-900 shadow-sm' 
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Volume
            </button>
          </div>
        </div>

        {/* Customer Type Filter */}
        <div className="flex items-center space-x-4">
          <h4 className="text-sm font-semibold text-gray-700">Customer Type:</h4>
          <select
            className="border border-gray-200 rounded-md px-3 py-1.5 bg-white text-xs focus:outline-none focus:ring-1 focus:ring-gray-300 focus:border-gray-300"
            value={customerType}
            onChange={(e) => setCustomerType(e.target.value)}
          >
            <option value="all">All Customers</option>
            <option value="new">New Customers</option>
            <option value="repeat">Repeat Customers</option>
          </select>
        </div>

        {/* Return Type Filter */}
        <div>
          <h4 className="text-sm font-semibold text-gray-700 mb-3">Filter by Return Type:</h4>
          <div className="flex flex-wrap gap-2">
            {returnTypes.map(type => (
              <button
                key={type.key}
                onClick={() => handleTypeToggle(type.key)}
                className={`px-3 py-1.5 rounded-full text-xs font-medium transition-all duration-200 border ${
                  selectedTypes.includes(type.key)
                    ? 'text-gray-700 border-gray-300 shadow-sm'
                    : 'text-gray-500 bg-gray-50 border-gray-200 hover:bg-gray-100'
                }`}
                style={{
                  backgroundColor: selectedTypes.includes(type.key) ? type.color : undefined,
                  borderColor: selectedTypes.includes(type.key) ? type.color : undefined
                }}
              >
                {type.label}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Chart */}
      <div className="h-80">
        <ResponsiveContainer width="100%" height="100%">
          <BarChart data={filteredData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
            <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" opacity="0.6" />
            <XAxis 
              dataKey="day" 
              axisLine={false}
              tickLine={false}
              tick={{ fontSize: 11, fill: '#6B7280' }}
              interval="preserveStartEnd"
            />
            <YAxis 
              tickFormatter={(v) => v.toLocaleString()}
              axisLine={false}
              tickLine={false}
              tick={{ fontSize: 11, fill: '#6B7280' }}
            />
            <Tooltip 
              formatter={(value, name) => [value.toLocaleString(), returnTypes.find(t => t.key === name)?.label || name]}
              labelFormatter={(label) => `Date: ${label}`}
              contentStyle={{
                backgroundColor: 'white',
                border: '1px solid #e5e7eb',
                borderRadius: '8px',
                boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
              }}
            />
            <Legend 
              wrapperStyle={{ 
                paddingTop: '20px',
                fontSize: '12px',
                color: '#6B7280'
              }}
              iconType="rect"
              layout="horizontal"
              verticalAlign="bottom"
              align="center"
            />
            {selectedTypes.includes('all') || selectedTypes.includes('deniedReturns') ? (
              <Bar dataKey="deniedReturns" stackId="a" fill="#FCA5A5" name="Denied Returns" />
            ) : null}
            {selectedTypes.includes('all') || selectedTypes.includes('deflectedReturns') ? (
              <Bar dataKey="deflectedReturns" stackId="a" fill="#7DD3FC" name="Deflected Returns" />
            ) : null}
            {selectedTypes.includes('all') || selectedTypes.includes('earlyAppeasement') ? (
              <Bar dataKey="earlyAppeasement" stackId="a" fill="#86EFAC" name="Early Appeasement" />
            ) : null}
            {selectedTypes.includes('all') || selectedTypes.includes('delayedRefunds') ? (
              <Bar dataKey="delayedRefunds" stackId="a" fill="#FDE68A" name="Delayed Refunds" />
            ) : null}
            {selectedTypes.includes('all') || selectedTypes.includes('kti') ? (
              <Bar dataKey="kti" stackId="a" fill="#C4B5FD" name="Keep the Item (KTI)" />
            ) : null}
            {selectedTypes.includes('all') || selectedTypes.includes('exchanges') ? (
              <Bar dataKey="exchanges" stackId="a" fill="#F9A8D4" name="Exchanges" />
            ) : null}
            {selectedTypes.includes('all') || selectedTypes.includes('giftCards') ? (
              <Bar dataKey="giftCards" stackId="a" fill="#A5B4FC" name="Gift Cards" />
            ) : null}
          </BarChart>
        </ResponsiveContainer>
      </div>

      {/* Summary Stats */}
      <div className="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center p-3 bg-gray-50 rounded-lg">
          <div className="text-2xl font-bold text-gray-900">
            {dailyData.reduce((sum, day) => sum + day.deniedReturns, 0).toLocaleString()}
          </div>
          <div className="text-xs text-gray-600">Denied Returns</div>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded-lg">
          <div className="text-2xl font-bold text-gray-900">
            {dailyData.reduce((sum, day) => sum + day.deflectedReturns, 0).toLocaleString()}
          </div>
          <div className="text-xs text-gray-600">Deflected Returns</div>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded-lg">
          <div className="text-2xl font-bold text-gray-900">
            {(dailyData.reduce((sum, day) => sum + day.earlyAppeasement, 0) + 
              dailyData.reduce((sum, day) => sum + day.delayedRefunds, 0)).toLocaleString()}
          </div>
          <div className="text-xs text-gray-600">Approved Returns</div>
        </div>
        <div className="text-center p-3 bg-gray-50 rounded-lg">
          <div className="text-2xl font-bold text-gray-900">
            {dailyData.reduce((sum, day) => sum + day.kti, 0).toLocaleString()}
          </div>
          <div className="text-xs text-gray-600">Keep the Item</div>
        </div>
      </div>
    </div>
  );
};

// Use Case Card Component
const UseCaseCard = ({ name, roiContribution, sparklineData, optimizationNote, icon, color }) => (
  <div className={`${color} p-4 rounded-lg border border-gray-200 hover:shadow-md transition-all duration-200 group`}>
    <div className="flex items-center gap-3 mb-3">
      <span className="text-2xl group-hover:scale-110 transition-transform duration-200">{icon}</span>
      <div>
        <h3 className="text-sm font-medium text-gray-700">{name}</h3>
        <div className="text-lg font-bold text-gray-900">{roiContribution}</div>
      </div>
    </div>
    
    {/* Mini Sparkline */}
    <div className="mb-3">
      <div className="h-8">
        <ResponsiveContainer width="100%" height="100%">
          <LineChart data={sparklineData}>
            <Line 
              type="monotone" 
              dataKey="value" 
              stroke="#3B82F6" 
              strokeWidth={2}
              dot={false}
            />
          </LineChart>
        </ResponsiveContainer>
      </div>
    </div>
    
    <p className="text-xs text-gray-600">{optimizationNote}</p>
  </div>
);

// Predictive Callout Component
const PredictiveCallout = ({ title, value, subtext, chartData, chartType = "bar", color, icon }) => (
  <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
    <div className="flex items-center justify-between mb-4">
      <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
      <div className="text-xs text-gray-500 font-medium">ðŸ”® Predictive</div>
    </div>
    
    <div className="space-y-4">
      <div>
        <div className={`text-2xl font-bold ${color}`}>{value}</div>
        <div className="text-sm text-gray-600">{subtext}</div>
      </div>
      
      {/* Mini Chart */}
      <div className="h-20">
        <ResponsiveContainer width="100%" height="100%">
          {chartType === "bar" ? (
            <BarChart data={chartData}>
              <Bar dataKey="value" fill={color.replace('text-', '#').replace('-600', '')} />
            </BarChart>
          ) : (
            <LineChart data={chartData}>
              <Line 
                type="monotone" 
                dataKey="value" 
                stroke={color.replace('text-', '#').replace('-600', '')} 
                strokeWidth={2}
                dot={false}
              />
            </LineChart>
          )}
        </ResponsiveContainer>
      </div>
    </div>
  </div>
);

// ROI Trend Chart with Toggle
const ROITrendChart = () => {
  const [showProjected, setShowProjected] = useState(true);
  
  const data = [
    { month: "Jan", actual: 120000, projected: null, milestone: null },
    { month: "Feb", actual: 135000, projected: null, milestone: null },
    { month: "Mar", actual: 150000, projected: null, milestone: "Force Boxless enabled" },
    { month: "Apr", actual: 180000, projected: null, milestone: null },
    { month: "May", actual: 220000, projected: null, milestone: "KTI strategy launched" },
    { month: "Jun", actual: 280000, projected: null, milestone: null },
    { month: "Jul", actual: 320000, projected: null, milestone: "Early Appeasement expanded" },
    { month: "Aug", actual: 380000, projected: null, milestone: "AI Detection enabled" },
    { month: "Sep", actual: 437000, projected: 520000, milestone: null },
    { month: "Oct", actual: null, projected: 580000, milestone: null },
    { month: "Nov", actual: null, projected: 650000, milestone: null },
    { month: "Dec", actual: null, projected: 720000, milestone: null }
  ];
  
  return (
    <div className="bg-white p-6 rounded-lg border border-gray-200 shadow-sm">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">ROI Growth Timeline</h3>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="showProjected"
              checked={showProjected}
              onChange={(e) => setShowProjected(e.target.checked)}
              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
            />
            <label htmlFor="showProjected" className="text-sm text-gray-700">
              Show Projected ROI
            </label>
          </div>
        </div>
      </div>
      
      <ResponsiveContainer width="100%" height={300}>
        <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" opacity="0.6" />
          <XAxis 
            dataKey="month" 
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 12, fill: '#6B7280' }}
          />
          <YAxis 
            tickFormatter={(v) => `$${(v / 1000).toFixed(0)}k`}
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 12, fill: '#6B7280' }}
          />
          <Tooltip 
            formatter={(v, name) => {
              if (name === 'projected') return [`$${v.toLocaleString()}`, 'Projected ROI'];
              return [`$${v.toLocaleString()}`, 'Actual ROI'];
            }}
            contentStyle={{
              backgroundColor: 'white',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}
          />
          <Legend />
          <Line 
            type="monotone" 
            dataKey="actual" 
            stroke="#3B82F6" 
            strokeWidth={3}
            dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}
            activeDot={{ r: 6, stroke: '#3B82F6', strokeWidth: 2 }}
            name="Actual ROI"
          />
          {showProjected && (
            <Line 
              type="monotone" 
              dataKey="projected" 
              stroke="#10B981" 
              strokeWidth={2}
              strokeDasharray="5 5"
              dot={{ fill: '#10B981', strokeWidth: 2, r: 3 }}
              connectNulls={false}
              name="Projected ROI"
            />
          )}
          {/* Milestone annotations */}
          {data.map((entry, index) => (
            entry.milestone && (
              <g key={`milestone-${index}`}>
                <circle 
                  cx={index * (1200 / data.length) + 60} 
                  cy={20} 
                  r={4} 
                  fill="#10B981" 
                  stroke="#059669" 
                  strokeWidth={2}
                />
                <text 
                  x={index * (1200 / data.length) + 60} 
                  y={15} 
                  textAnchor="middle" 
                  fontSize="10" 
                  fill="#065F46" 
                  fontWeight="600"
                >
                  ðŸš€
                </text>
              </g>
            )
          ))}
        </LineChart>
      </ResponsiveContainer>
      
      {/* Milestone Legend */}
      <div className="mt-4 space-y-2">
        {data.filter(entry => entry.milestone).map((entry, index) => (
          <div key={index} className="flex items-center text-xs text-gray-600">
            <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
            <span className="font-medium">{entry.month}:</span>
            <span className="ml-1">{entry.milestone}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

// Revenue Protection Wrapper with Toggle
const RevenueProtectionWrapper = () => {
  const [viewType, setViewType] = useState("value"); // "value" | "volume" | "share"
  const [customerType, setCustomerType] = useState("all"); // "all" | "new" | "repeat"

  return (
    <div className="bg-white shadow rounded-xl p-6 mb-8">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">Revenue Protection Breakdown</h3>
        <div className="flex items-center space-x-4">
          {/* Customer Type Filter */}
          <select
            className="border border-gray-200 rounded-md px-3 py-1.5 bg-white text-xs focus:outline-none focus:ring-1 focus:ring-gray-300 focus:border-gray-300"
            value={customerType}
            onChange={(e) => setCustomerType(e.target.value)}
          >
            <option value="all">All Customers</option>
            <option value="new">New Customers</option>
            <option value="repeat">Repeat Customers</option>
          </select>
          
          {/* View Type Toggle */}
          <div className="flex gap-2">
            <button
              className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${
                viewType === "value" 
                  ? "bg-blue-600 text-white" 
                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
              }`}
              onClick={() => setViewType("value")}
            >
              $ Value
            </button>
            <button
              className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${
                viewType === "volume" 
                  ? "bg-blue-600 text-white" 
                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
              }`}
              onClick={() => setViewType("volume")}
            >
              Volume
            </button>
            <button
              className={`px-3 py-1 rounded-full text-xs font-medium transition-all duration-200 ${
                viewType === "share" 
                  ? "bg-blue-600 text-white" 
                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
              }`}
              onClick={() => setViewType("share")}
            >
              % Share
            </button>
          </div>
        </div>
      </div>

      {viewType === "value" && <RevenueValueChart />}
      {viewType === "volume" && <RevenueVolumeChart />}
      {viewType === "share" && <ROIShareTrend />}
    </div>
  );
};

// Revenue Value Chart
const RevenueValueChart = () => {
  const data = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (29 - i));
    const dayOfWeek = date.getDay();
    const weekendMultiplier = dayOfWeek === 0 || dayOfWeek === 6 ? 0.6 : 1;
    
    return {
      date: date.toISOString().split('T')[0],
      day: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      EarlyRefund: Math.round((100 + Math.random() * 50) * weekendMultiplier),
      DelayedRefund: Math.round((200 + Math.random() * 100) * weekendMultiplier),
      BlockReturn: Math.round((75 + Math.random() * 40) * weekendMultiplier),
      KTI: Math.round((50 + Math.random() * 25) * weekendMultiplier),
      Boxless: Math.round((10 + Math.random() * 5) * weekendMultiplier),
      FTID: Math.round((5 + Math.random() * 3) * weekendMultiplier)
    };
  });

  return (
    <div className="h-80">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" opacity="0.6" />
          <XAxis
            dataKey="day"
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 11, fill: '#6B7280' }}
            interval="preserveStartEnd"
          />
          <YAxis
            tickFormatter={(v) => `$${v}K`}
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 11, fill: '#6B7280' }}
          />
          <Tooltip
            formatter={(value, name) => [`$${value}K`, name]}
            labelFormatter={(label) => `Date: ${label}`}
            contentStyle={{
              backgroundColor: 'white',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}
          />
          <Legend
            wrapperStyle={{
              paddingTop: '20px',
              fontSize: '12px',
              color: '#6B7280'
            }}
            iconType="rect"
            layout="horizontal"
            verticalAlign="bottom"
            align="center"
          />
          <Bar dataKey="DelayedRefund" stackId="a" fill="#DC2626" name="Refund upon Inspection" />
          <Bar dataKey="EarlyRefund" stackId="a" fill="#16A34A" name="Early Refund at Scan" />
          <Bar dataKey="BlockReturn" stackId="a" fill="#EF4444" name="Block Return / Charge Fee" />
          <Bar dataKey="KTI" stackId="a" fill="#3B82F6" name="Keep the Item / Instant Credit" />
          <Bar dataKey="Boxless" stackId="a" fill="#7C3AED" name="Force Boxless Drop-Off" />
          <Bar dataKey="FTID" stackId="a" fill="#F97316" name="FTID Detection" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

// Revenue Volume Chart
const RevenueVolumeChart = () => {
  const data = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (29 - i));
    const dayOfWeek = date.getDay();
    const weekendMultiplier = dayOfWeek === 0 || dayOfWeek === 6 ? 0.6 : 1;
    
    return {
      date: date.toISOString().split('T')[0],
      day: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      EarlyRefund: Math.round((40 + Math.random() * 20) * weekendMultiplier),
      DelayedRefund: Math.round((80 + Math.random() * 40) * weekendMultiplier),
      BlockReturn: Math.round((30 + Math.random() * 15) * weekendMultiplier),
      KTI: Math.round((20 + Math.random() * 10) * weekendMultiplier),
      Boxless: Math.round((4 + Math.random() * 2) * weekendMultiplier),
      FTID: Math.round((2 + Math.random() * 1) * weekendMultiplier)
    };
  });

  return (
    <div className="h-80">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" opacity="0.6" />
          <XAxis
            dataKey="day"
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 11, fill: '#6B7280' }}
            interval="preserveStartEnd"
          />
          <YAxis
            tickFormatter={(v) => v.toLocaleString()}
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 11, fill: '#6B7280' }}
          />
          <Tooltip
            formatter={(value, name) => [value.toLocaleString(), name]}
            labelFormatter={(label) => `Date: ${label}`}
            contentStyle={{
              backgroundColor: 'white',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}
          />
          <Legend
            wrapperStyle={{
              paddingTop: '20px',
              fontSize: '12px',
              color: '#6B7280'
            }}
            iconType="rect"
            layout="horizontal"
            verticalAlign="bottom"
            align="center"
          />
          <Bar dataKey="DelayedRefund" stackId="a" fill="#DC2626" name="Refund upon Inspection" />
          <Bar dataKey="EarlyRefund" stackId="a" fill="#16A34A" name="Early Refund at Scan" />
          <Bar dataKey="BlockReturn" stackId="a" fill="#EF4444" name="Block Return / Charge Fee" />
          <Bar dataKey="KTI" stackId="a" fill="#3B82F6" name="Keep the Item / Instant Credit" />
          <Bar dataKey="Boxless" stackId="a" fill="#7C3AED" name="Force Boxless Drop-Off" />
          <Bar dataKey="FTID" stackId="a" fill="#F97316" name="FTID Detection" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  );
};

// ROI Share Trend Chart
const ROIShareTrend = () => {
  const data = Array.from({ length: 30 }, (_, i) => {
    const date = new Date();
    date.setDate(date.getDate() - (29 - i));
    
    return {
      date: date.toISOString().split('T')[0],
      day: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),
      EarlyRefund: 0.15 + (Math.random() - 0.5) * 0.1,
      DelayedRefund: 0.46 + (Math.random() - 0.5) * 0.1,
      BlockReturn: 0.17 + (Math.random() - 0.5) * 0.1,
      KTI: 0.11 + (Math.random() - 0.5) * 0.1,
      Boxless: 0.02 + (Math.random() - 0.5) * 0.01,
      FTID: 0.01 + (Math.random() - 0.5) * 0.01
    };
  });

  return (
    <div className="h-80">
      <ResponsiveContainer width="100%" height="100%">
        <AreaChart data={data} stackOffset="expand" margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>
          <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" opacity="0.6" />
          <XAxis
            dataKey="day"
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 11, fill: '#6B7280' }}
            interval="preserveStartEnd"
          />
          <YAxis 
            tickFormatter={(v) => `${(v * 100).toFixed(0)}%`}
            axisLine={false}
            tickLine={false}
            tick={{ fontSize: 11, fill: '#6B7280' }}
          />
          <Tooltip 
            formatter={(v) => `${(v * 100).toFixed(1)}%`}
            labelFormatter={(label) => `Date: ${label}`}
            contentStyle={{
              backgroundColor: 'white',
              border: '1px solid #e5e7eb',
              borderRadius: '8px',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
            }}
          />
          <Legend
            wrapperStyle={{
              paddingTop: '20px',
              fontSize: '12px',
              color: '#6B7280'
            }}
            iconType="rect"
            layout="horizontal"
            verticalAlign="bottom"
            align="center"
          />
          <Area type="monotone" dataKey="DelayedRefund" stackId="1" stroke="#DC2626" fill="#DC2626" name="Refund upon Inspection" />
          <Area type="monotone" dataKey="EarlyRefund" stackId="1" stroke="#16A34A" fill="#16A34A" name="Early Refund at Scan" />
          <Area type="monotone" dataKey="BlockReturn" stackId="1" stroke="#EF4444" fill="#EF4444" name="Block Return / Charge Fee" />
          <Area type="monotone" dataKey="KTI" stackId="1" stroke="#3B82F6" fill="#3B82F6" name="Keep the Item / Instant Credit" />
          <Area type="monotone" dataKey="Boxless" stackId="1" stroke="#7C3AED" fill="#7C3AED" name="Force Boxless Drop-Off" />
          <Area type="monotone" dataKey="FTID" stackId="1" stroke="#F97316" fill="#F97316" name="FTID Detection" />
        </AreaChart>
      </ResponsiveContainer>
    </div>
  );
};

// Main V2 Dashboard Component
function RoiDashboardV2() {
  const [timeRange, setTimeRange] = useState("30d");
  const [kpiPeriod, setKpiPeriod] = useState("30d");
  
  // Modal state management
  const [activeModal, setActiveModal] = useState(null);

  // Heroicons SVG components
  const ShieldCheck = () => (
    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
    </svg>
  );

  const TrendingUp = () => (
    <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
    </svg>
  );

  const RepeatIcon = () => (
    <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
    </svg>
  );

  const ShieldAlert = () => (
    <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
    </svg>
  );

  const handleExportPDF = async () => {
    await exportToPDF('v2-dashboard-content', `ROI-Dashboard-V2-${new Date().toISOString().split('T')[0]}.pdf`);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Returns Intelligence ROI Dashboard</h1>
              <p className="text-sm text-gray-600 mt-1">V2 - Simplified Interactive Layout</p>
            </div>
            <div className="flex items-center space-x-4">
              <select
                className="border border-gray-200 rounded-md px-3 py-2 bg-white text-sm focus:outline-none focus:ring-1 focus:ring-gray-300 focus:border-gray-300"
                value={timeRange}
                onChange={(e) => setTimeRange(e.target.value)}
              >
                <option value="7d">Last 7 days</option>
                <option value="30d">Last 30 days</option>
                <option value="90d">Last 90 days</option>
                <option value="1y">Last year</option>
                <option value="custom">Custom range</option>
              </select>
              <button 
                onClick={handleExportPDF}
                data-export-pdf
                className="px-4 py-2 rounded-md text-sm font-medium focus:outline-none focus:ring-1 focus:ring-gray-300 transition-colors duration-200 bg-blue-600 text-white hover:bg-blue-700 flex items-center gap-2"
              >
                <span>ðŸ“„</span>
                Export PDF
              </button>
            </div>
          </div>
        </div>
      </header>

      {/* Dashboard Content */}
      <main id="v2-dashboard-content" className="max-w-7xl mx-auto px-4 sm:px-6 py-8">
        
        {/* Meta KPI Header */}
        <HeaderMetaKPI roiPercent={55} delta={5} kpiPeriod={kpiPeriod} setKpiPeriod={setKpiPeriod} />
        
        {/* KPI Strip - 4 cards only */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          <KpiCard
            icon={<ShieldCheck />}
            title="Total Revenue Protection"
            value="$437,000"
            sublabel="8,500 returns prevented"
            deltaText="+15% (30d)"
            deltaTone="positive"
          />
          <KpiCard
            icon={<TrendingUp />}
            title="Customer LTV Impact"
            value="+15%"
            sublabel="+$300K projected LTV value"
            deltaText="+3% (30d)"
            deltaTone="positive"
          />
          <KpiCard
            icon={<RepeatIcon />}
            title="Repeat Purchase Rate Uplift"
            value="+50%"
            deltaText="+12% (30d)"
            deltaTone="positive"
          />
          <KpiCard
            icon={<ShieldAlert />}
            title="Fraud/Loss Prevention"
            value="$200,000"
            sublabel="180 high-risk returns prevented"
            deltaText="+8% (30d)"
            deltaTone="positive"
          />
        </div>

        {/* Main Content Section */}
        <section className="mb-12">
          {/* Revenue Protection Breakdown - Interactive with Toggle */}
          <RevenueProtectionWrapper />

          {/* Trust Mix Composition */}
          <TrustMixComposition />

          {/* Trust Impact Metrics */}
          <TrustImpactMetrics />
          <div className="text-xs text-blue-600 hover:underline cursor-pointer mt-2"
               onClick={() => setActiveModal("Segmentation")}>
            View Customer Segmentation â†’
          </div>

          {/* Outcome Metric Grid */}
          <OutcomeMetricGrid />


        </section>

      </main>

      {/* Drill-In Modals */}
      {activeModal === "Segmentation" && (
        <DrillInModal title="Customer Segmentation" onClose={() => setActiveModal(null)}>
          <SegmentationDrillIn />
        </DrillInModal>
      )}
      {activeModal === "KTI" && (
        <DrillInModal title="Keep The Item (KTI)" onClose={() => setActiveModal(null)}>
          <KtiDrillIn />
        </DrillInModal>
      )}
      {activeModal === "Boxless" && (
        <DrillInModal title="Force Boxless Drop-Off" onClose={() => setActiveModal(null)}>
          <BoxlessDrillIn />
        </DrillInModal>
      )}
      {activeModal === "Appeasement" && (
        <DrillInModal title="Appeasement Outcomes" onClose={() => setActiveModal(null)}>
          <AppeasementDrillIn />
        </DrillInModal>
      )}
      {activeModal === "Delayed" && (
        <DrillInModal title="Refund upon Inspection" onClose={() => setActiveModal(null)}>
          <DelayedRefundDrillIn />
        </DrillInModal>
      )}
      {activeModal === "FTID" && (
        <DrillInModal title="FTID Detection" onClose={() => setActiveModal(null)}>
          <FtidDrillIn />
        </DrillInModal>
      )}
    </div>
  );
}

export default RoiDashboardV2;